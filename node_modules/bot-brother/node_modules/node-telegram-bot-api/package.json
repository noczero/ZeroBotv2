{
  "name": "node-telegram-bot-api",
  "version": "0.11.1",
  "description": "Telegram Bot API",
  "main": "index.js",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "keywords": [
    "telegram",
    "telegram bot",
    "telegram bot api",
    "bot"
  ],
  "scripts": {
    "test": "mocha test/index.js",
    "test-cov": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "author": {
    "name": "Yago Pérez",
    "email": "yagoperezs@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "bluebird": "^2.9.30",
    "debug": "^2.2.0",
    "mime": "^1.3.4",
    "request": "^2.58.0",
    "requestretry": "^1.5.0"
  },
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.17",
    "mocha": "^2.2.5",
    "mocha-lcov-reporter": "0.0.2",
    "should": "^7.0.1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yagop/node-telegram-bot-api.git"
  },
  "bugs": {
    "url": "https://github.com/yagop/node-telegram-bot-api/issues"
  },
  "homepage": "https://github.com/yagop/node-telegram-bot-api",
  "contributors": [
    {
      "name": "Ilias Ismanalijev",
      "email": "hello@illyism.com",
      "url": "https://github.com/Illyism"
    },
    {
      "name": "Yago",
      "email": "yago@yago.me",
      "url": "https://github.com/yagop"
    },
    {
      "name": "Riddler",
      "url": "https://github.com/Waterloo"
    },
    {
      "name": "Sebastian Troć",
      "email": "sebastian.troc@gucman.pl",
      "url": "https://github.com/SebastianTroc"
    }
  ],
  "gitHead": "4fac825fbc2f2e100df05df3740728ee29cbc02f",
  "readme": "[![Build Status](https://travis-ci.org/yagop/node-telegram-bot-api.svg?branch=master)](https://travis-ci.org/yagop/node-telegram-bot-api) [![Build status](https://ci.appveyor.com/api/projects/status/ujko6bsum3g5msjh/branch/master?svg=true)](https://ci.appveyor.com/project/yagop/node-telegram-bot-api/branch/master) [![Coverage Status](https://coveralls.io/repos/yagop/node-telegram-bot-api/badge.svg?branch=master)](https://coveralls.io/r/yagop/node-telegram-bot-api?branch=master) [![bitHound Score](https://www.bithound.io/github/yagop/node-telegram-bot-api/badges/score.svg)](https://www.bithound.io/github/yagop/node-telegram-bot-api)\r\n\r\nNode.js module to interact with official [Telegram Bot API](https://core.telegram.org/bots/api). A bot token is needed, to obtain one, talk to [@botfather](telegram.me/BotFather) and create a new bot.\r\n\r\n```sh\r\nnpm install node-telegram-bot-api\r\n```\r\n\r\n```js\r\nvar TelegramBot = require('node-telegram-bot-api');\r\n\r\nvar token = 'YOUR_TELEGRAM_BOT_TOKEN';\r\n// Setup polling way\r\nvar bot = new TelegramBot(token, {polling: true});\r\nbot.on('message', function (msg) {\r\n  var chatId = msg.chat.id;\r\n  // photo can be: a file path, a stream or a Telegram file_id\r\n  var photo = 'bot.gif';\r\n  bot.sendPhoto(chatId, photo, {caption: \"I'm a bot!\"});\r\n});\r\n```\r\n\r\nThere are some other examples on [examples](https://github.com/yagop/node-telegram-bot-api/tree/master/examples).\r\n\r\n* * *\r\n\r\n\r\n<!-- Start src/telegram.js -->\r\n\r\n## TelegramBot\r\n\r\nBoth request method to obtain messages are implemented. To use standard polling, set `polling: true`\r\non `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a valid (not self signed) SSL certificate.\r\nEmmits `message` when a message arrives.\r\n\r\nSee: https://core.telegram.org/bots/api\r\n\r\n### Params:\r\n\r\n* **String** *token* Bot Token\r\n* **Object** *[options]*\r\n* **Boolean|Object** *[options.polling=false]* Set true to enable polling\r\n* **String|Number** *[options.polling.timeout=4]* Polling time\r\n* **Boolean|Object** *[options.webHook=false]* Set true to enable WebHook\r\n* **String** *[options.webHook.key]* PEM private key to webHook server\r\n* **String** *[options.webHook.cert]* PEM certificate key to webHook server\r\n\r\n## getMe()\r\n\r\nReturns basic information about the bot in form of a `User` object.\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n## setWebHook(url)\r\n\r\nSpecify an url to receive incoming updates via an outgoing webHook.\r\n\r\nSee: https://core.telegram.org/bots/api#setwebhook\r\n\r\n### Params:\r\n\r\n* **String** *url* URL where Telegram will make HTTP Post. Leave empty to delete webHook.\r\n\r\n## getUpdates([timeout], [limit], [offset])\r\n\r\nUse this method to receive incoming updates using long polling\r\n\r\nSee: https://core.telegram.org/bots/api#getupdates\r\n\r\n### Params:\r\n\r\n* **Number|String** *[timeout]* Timeout in seconds for long polling.\r\n* **Number|String** *[limit]* Limits the number of updates to be retrieved.\r\n* **Number|String** *[offset]* Identifier of the first update to be returned.\r\n\r\n### Return:\r\n\r\n* **Promise** Updates\r\n\r\n## sendMessage(chatId, text, [options])\r\n\r\nSend text message.\r\n\r\nSee: https://core.telegram.org/bots/api#sendmessage\r\n\r\n### Params:\r\n\r\n* **Number|String** *chatId* Unique identifier for the message recipient\r\n* **Sting** *text* Text of the message to be sent\r\n* **Object** *[options]* Additional Telegram query options\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n## forwardMessage(chatId, fromChatId, messageId)\r\n\r\nForward messages of any kind.\r\n\r\n### Params:\r\n\r\n* **Number|String** *chatId* Unique identifier for the message recipient\r\n* **Number|String** *fromChatId* Unique identifier for the chat where the original message was sent\r\n* **Number|String** *messageId* Unique message identifier\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n## sendPhoto(chatId, photo, [options])\r\n\r\nSend photo\r\n\r\nSee: https://core.telegram.org/bots/api#sendphoto\r\n\r\n### Params:\r\n\r\n* **Number|String** *chatId* Unique identifier for the message recipient\r\n* **String|stream.Stream** *photo* A file path or a Stream. Can also be a `file_id` previously uploaded\r\n* **Object** *[options]* Additional Telegram query options\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n## sendAudio(chatId, audio, [options])\r\n\r\nSend audio\r\n\r\nSee: https://core.telegram.org/bots/api#sendaudio\r\n\r\n### Params:\r\n\r\n* **Number|String** *chatId* Unique identifier for the message recipient\r\n* **String|stream.Stream** *audio* A file path or a Stream. Can also be a `file_id` previously uploaded.\r\n* **Object** *[options]* Additional Telegram query options\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n## sendDocument(chatId, A, [options])\r\n\r\nSend Document\r\n\r\nSee: https://core.telegram.org/bots/api#sendDocument\r\n\r\n### Params:\r\n\r\n* **Number|String** *chatId* Unique identifier for the message recipient\r\n* **String|stream.Stream** *A* file path or a Stream. Can also be a `file_id` previously uploaded.\r\n* **Object** *[options]* Additional Telegram query options\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n## sendSticker(chatId, A, [options])\r\n\r\nSend .webp stickers.\r\n\r\nSee: https://core.telegram.org/bots/api#sendsticker\r\n\r\n### Params:\r\n\r\n* **Number|String** *chatId* Unique identifier for the message recipient\r\n* **String|stream.Stream** *A* file path or a Stream. Can also be a `file_id` previously uploaded.\r\n* **Object** *[options]* Additional Telegram query options\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n## sendVideo(chatId, A, [options])\r\n\r\nSend video files, Telegram clients support mp4 videos (other formats may be sent whith `sendDocument`)\r\n\r\nSee: https://core.telegram.org/bots/api#sendvideo\r\n\r\n### Params:\r\n\r\n* **Number|String** *chatId* Unique identifier for the message recipient\r\n* **String|stream.Stream** *A* file path or a Stream. Can also be a `file_id` previously uploaded.\r\n* **Object** *[options]* Additional Telegram query options\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n## sendChatAction(chatId, action)\r\n\r\nSend chat action.\r\n`typing` for text messages,\r\n`upload_photo` for photos, `record_video` or `upload_video` for videos,\r\n`record_audio` or `upload_audio` for audio files, `upload_document` for general files,\r\n`find_location` for location data.\r\n\r\nSee: https://core.telegram.org/bots/api#sendchataction\r\n\r\n### Params:\r\n\r\n* **Number|String** *chatId* Unique identifier for the message recipient\r\n* **String** *action* Type of action to broadcast.\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n## getUserProfilePhotos(userId, [offset], [limit])\r\n\r\nUse this method to get a list of profile pictures for a user.\r\nReturns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\r\n\r\nSee: https://core.telegram.org/bots/api#getuserprofilephotos\r\n\r\n### Params:\r\n\r\n* **Number|String** *userId* Unique identifier of the target user\r\n* **Number** *[offset]* Sequential number of the first photo to be returned. By default, all photos are returned.\r\n* **Number** *[limit]* Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100.\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n## sendLocation(chatId, latitude, longitude, [options])\r\n\r\nSend location.\r\nUse this method to send point on the map.\r\n\r\nSee: https://core.telegram.org/bots/api#sendlocation\r\n\r\n### Params:\r\n\r\n* **Number|String** *chatId* Unique identifier for the message recipient\r\n* **Float** *latitude* Latitude of location\r\n* **Float** *longitude* Longitude of location\r\n* **Object** *[options]* Additional Telegram query options\r\n\r\n### Return:\r\n\r\n* **Promise**\r\n\r\n<!-- End src/telegram.js -->\r\n",
  "readmeFilename": "README.md",
  "_id": "node-telegram-bot-api@0.11.1",
  "_shasum": "c55eb48e214a43301e37cd31f9e3ef22a929e976",
  "_from": "git+https://github.com/SerjoPepper/node-telegram-bot-api.git#master",
  "_resolved": "git+https://github.com/SerjoPepper/node-telegram-bot-api.git#4fac825fbc2f2e100df05df3740728ee29cbc02f"
}
